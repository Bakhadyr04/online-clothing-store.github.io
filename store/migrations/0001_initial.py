# Generated by Django 3.2.10 on 2024-06-16 14:58
# Сгенерировано Django 3.2.10 16 июня 2024 г. в 14:58

from django.db import migrations, models
import django.db.models.deletion
import taggit.managers

class Migration(migrations.Migration):
    initial = True  # Это начальная миграция

    dependencies = [
        # Зависимость от миграции '0002_remove_content_type_name' из приложения 'contenttypes'
        ('contenttypes', '0002_remove_content_type_name'),
    ]

    operations = [
        migrations.CreateModel(
            name='ItemTag',  # Определение модели ItemTag
            fields=[
                # Поле ID с автоматическим увеличением, основной ключ
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Поле для названия категории (макс. длина 100 символов, уникальное)
                ('name', models.CharField(max_length=100, unique=True, verbose_name='name')),
                # Поле для URL-совместимого названия категории
                ('slug', models.SlugField(allow_unicode=True, max_length=100, unique=True, verbose_name='slug')),
                # Поле для изображения категории (может быть пустым)
                ('image', models.ImageField(blank=True, upload_to='categories/', verbose_name='Изображение')),
                # Поле для описания категории (может быть пустым)
                ('description', models.TextField(blank=True, verbose_name='Описание')),
            ],
            options={
                'verbose_name': 'Категория',  # Отображаемое имя в единственном числе
                'verbose_name_plural': 'Категории',  # Отображаемое имя во множественном числе
            },
        ),

        migrations.CreateModel(
            name='TaggedItem',  # Определение модели TaggedItem
            fields=[
                # Поле ID с автоматическим увеличением, основной ключ
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Поле для ID объекта (с индексом в базе данных)
                ('object_id', models.IntegerField(db_index=True, verbose_name='object ID')),
                # Внешний ключ для связи с типом контента (ContentType)
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='store_taggeditem_tagged_items', to='contenttypes.contenttype', verbose_name='content type')),
                # Внешний ключ для связи с моделью ItemTag (категория)
                ('tag', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='store.itemtag', verbose_name='Категория')),
            ],
            options={
                'abstract': False,  # Это не абстрактная модель
            },
        ),

        migrations.CreateModel(
            name='Item',  # Определение модели Item
            fields=[
                # Поле ID с автоматическим увеличением, основной ключ
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                # Поле для названия товара
                ('title', models.CharField(max_length=200, verbose_name='Название')),
                # Поле для описания товара
                ('description', models.TextField(verbose_name='Описание')),
                # Уникальное поле для идентификации товара
                ('slug', models.CharField(max_length=50, unique=True)),
                # Дата добавления товара
                ('pub_date', models.DateTimeField(auto_now_add=True, verbose_name='Дата добавления')),
                # Цена товара
                ('price', models.DecimalField(decimal_places=2, max_digits=8, verbose_name='Новая цена')),
                # Старая цена товара (может быть пустой)
                ('old_price', models.DecimalField(blank=True, decimal_places=2, max_digits=8, null=True, verbose_name='Старая цена')),
                # Изображение товара (может быть пустым)
                ('image', models.ImageField(blank=True, upload_to='items/', verbose_name='Изображение')),
                # Доступность товара
                ('is_available', models.BooleanField(default=True, verbose_name='Доступно')),
                # Менеджер для управления категориями (тегами) товара
                ('tags', taggit.managers.TaggableManager(help_text='A comma-separated list of tags.', related_name='tagged_items', through='store.TaggedItem', to='store.ItemTag', verbose_name='Категории')),
            ],
            options={
                'verbose_name': 'Товар',  # Отображаемое имя в единственном числе
                'verbose_name_plural': 'Товары',  # Отображаемое имя во множественном числе
                'ordering': ['-price'],  # Сортировка по убыванию цены по умолчанию
            },
        ),
    ]
